/*
 * Wikimedia
 * This API provides cacheable and straightforward access to Wikimedia content and data, in machine-readable formats. ### Global Rules - Limit your clients to no more than 200 requests/s to this API.   Each API endpoint's documentation may detail more specific usage limits. - Set a unique `User-Agent` or `Api-User-Agent` header that   allows us to contact you quickly. Email addresses or URLs   of contact pages work well.  By using this API, you agree to Wikimedia's  [Terms of Use](https://wikimediafoundation.org/wiki/Terms_of_Use) and [Privacy Policy](https://wikimediafoundation.org/wiki/Privacy_policy). Unless otherwise specified in the endpoint documentation below, content accessed via this API is licensed under the [CC-BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/)  and [GFDL](https://www.gnu.org/copyleft/fdl.html) licenses, and you irrevocably agree to release modifications or additions made through this API under these licenses.  See https://www.mediawiki.org/wiki/REST_API for background and details. ### Endpoint documentation Please consult each endpoint's documentation for details on: - Licensing information for the specific type of content   and data served via the endpoint. - Stability markers to inform you about development status and   change policy, according to   [our API version policy](https://www.mediawiki.org/wiki/API_versioning). - Endpoint specific usage limits. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CxDict;
import com.konfigthis.client.model.CxLanguagepairs;
import com.konfigthis.client.model.CxListTools;
import com.konfigthis.client.model.CxMt;
import com.konfigthis.client.model.Problem;
import com.konfigthis.client.model.TransformContentMachineTranslateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TransformApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransformApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TransformApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call contentMachineTranslateCall(String fromLang, String toLang, TransformContentMachineTranslateRequest transformContentMachineTranslateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transformContentMachineTranslateRequest;

        // create path and map variables
        String localVarPath = "/transform/html/from/{from_lang}/to/{to_lang}"
            .replace("{" + "from_lang" + "}", localVarApiClient.escapeString(fromLang.toString()))
            .replace("{" + "to_lang" + "}", localVarApiClient.escapeString(toLang.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentMachineTranslateValidateBeforeCall(String fromLang, String toLang, TransformContentMachineTranslateRequest transformContentMachineTranslateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fromLang' is set
        if (fromLang == null) {
            throw new ApiException("Missing the required parameter 'fromLang' when calling contentMachineTranslate(Async)");
        }

        // verify the required parameter 'toLang' is set
        if (toLang == null) {
            throw new ApiException("Missing the required parameter 'toLang' when calling contentMachineTranslate(Async)");
        }

        // verify the required parameter 'transformContentMachineTranslateRequest' is set
        if (transformContentMachineTranslateRequest == null) {
            throw new ApiException("Missing the required parameter 'transformContentMachineTranslateRequest' when calling contentMachineTranslate(Async)");
        }

        return contentMachineTranslateCall(fromLang, toLang, transformContentMachineTranslateRequest, _callback);

    }


    private ApiResponse<CxMt> contentMachineTranslateWithHttpInfo(String fromLang, String toLang, TransformContentMachineTranslateRequest transformContentMachineTranslateRequest) throws ApiException {
        okhttp3.Call localVarCall = contentMachineTranslateValidateBeforeCall(fromLang, toLang, transformContentMachineTranslateRequest, null);
        Type localVarReturnType = new TypeToken<CxMt>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call contentMachineTranslateAsync(String fromLang, String toLang, TransformContentMachineTranslateRequest transformContentMachineTranslateRequest, final ApiCallback<CxMt> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentMachineTranslateValidateBeforeCall(fromLang, toLang, transformContentMachineTranslateRequest, _callback);
        Type localVarReturnType = new TypeToken<CxMt>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ContentMachineTranslateRequestBuilder {
        private final String html;
        private final String fromLang;
        private final String toLang;

        private ContentMachineTranslateRequestBuilder(String html, String fromLang, String toLang) {
            this.html = html;
            this.fromLang = fromLang;
            this.toLang = toLang;
        }

        /**
         * Build call for contentMachineTranslate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The translated content </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TransformContentMachineTranslateRequest transformContentMachineTranslateRequest = buildBodyParams();
            return contentMachineTranslateCall(fromLang, toLang, transformContentMachineTranslateRequest, _callback);
        }

        private TransformContentMachineTranslateRequest buildBodyParams() {
            TransformContentMachineTranslateRequest transformContentMachineTranslateRequest = new TransformContentMachineTranslateRequest();
            transformContentMachineTranslateRequest.html(this.html);
            return transformContentMachineTranslateRequest;
        }

        /**
         * Execute contentMachineTranslate request
         * @return CxMt
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The translated content </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public CxMt execute() throws ApiException {
            TransformContentMachineTranslateRequest transformContentMachineTranslateRequest = buildBodyParams();
            ApiResponse<CxMt> localVarResp = contentMachineTranslateWithHttpInfo(fromLang, toLang, transformContentMachineTranslateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute contentMachineTranslate request with HTTP info returned
         * @return ApiResponse&lt;CxMt&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The translated content </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CxMt> executeWithHttpInfo() throws ApiException {
            TransformContentMachineTranslateRequest transformContentMachineTranslateRequest = buildBodyParams();
            return contentMachineTranslateWithHttpInfo(fromLang, toLang, transformContentMachineTranslateRequest);
        }

        /**
         * Execute contentMachineTranslate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The translated content </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CxMt> _callback) throws ApiException {
            TransformContentMachineTranslateRequest transformContentMachineTranslateRequest = buildBodyParams();
            return contentMachineTranslateAsync(fromLang, toLang, transformContentMachineTranslateRequest, _callback);
        }
    }

    /**
     * Machine-translate content
     * Fetches the machine translation for the posted content from the source to the destination language.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param fromLang The source language code (required)
     * @param toLang The target language code (required)
     * @param transformContentMachineTranslateRequest  (required)
     * @return ContentMachineTranslateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The translated content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ContentMachineTranslateRequestBuilder contentMachineTranslate(String html, String fromLang, String toLang) throws IllegalArgumentException {
        if (html == null) throw new IllegalArgumentException("\"html\" is required but got null");
            

        if (fromLang == null) throw new IllegalArgumentException("\"fromLang\" is required but got null");
            

        if (toLang == null) throw new IllegalArgumentException("\"toLang\" is required but got null");
            

        return new ContentMachineTranslateRequestBuilder(html, fromLang, toLang);
    }
    private okhttp3.Call contentMachineTranslate_0Call(String fromLang, String toLang, String provider, TransformContentMachineTranslateRequest transformContentMachineTranslateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transformContentMachineTranslateRequest;

        // create path and map variables
        String localVarPath = "/transform/html/from/{from_lang}/to/{to_lang}/{provider}"
            .replace("{" + "from_lang" + "}", localVarApiClient.escapeString(fromLang.toString()))
            .replace("{" + "to_lang" + "}", localVarApiClient.escapeString(toLang.toString()))
            .replace("{" + "provider" + "}", localVarApiClient.escapeString(provider.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentMachineTranslate_0ValidateBeforeCall(String fromLang, String toLang, String provider, TransformContentMachineTranslateRequest transformContentMachineTranslateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fromLang' is set
        if (fromLang == null) {
            throw new ApiException("Missing the required parameter 'fromLang' when calling contentMachineTranslate_0(Async)");
        }

        // verify the required parameter 'toLang' is set
        if (toLang == null) {
            throw new ApiException("Missing the required parameter 'toLang' when calling contentMachineTranslate_0(Async)");
        }

        // verify the required parameter 'provider' is set
        if (provider == null) {
            throw new ApiException("Missing the required parameter 'provider' when calling contentMachineTranslate_0(Async)");
        }

        // verify the required parameter 'transformContentMachineTranslateRequest' is set
        if (transformContentMachineTranslateRequest == null) {
            throw new ApiException("Missing the required parameter 'transformContentMachineTranslateRequest' when calling contentMachineTranslate_0(Async)");
        }

        return contentMachineTranslate_0Call(fromLang, toLang, provider, transformContentMachineTranslateRequest, _callback);

    }


    private ApiResponse<CxMt> contentMachineTranslate_0WithHttpInfo(String fromLang, String toLang, String provider, TransformContentMachineTranslateRequest transformContentMachineTranslateRequest) throws ApiException {
        okhttp3.Call localVarCall = contentMachineTranslate_0ValidateBeforeCall(fromLang, toLang, provider, transformContentMachineTranslateRequest, null);
        Type localVarReturnType = new TypeToken<CxMt>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call contentMachineTranslate_0Async(String fromLang, String toLang, String provider, TransformContentMachineTranslateRequest transformContentMachineTranslateRequest, final ApiCallback<CxMt> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentMachineTranslate_0ValidateBeforeCall(fromLang, toLang, provider, transformContentMachineTranslateRequest, _callback);
        Type localVarReturnType = new TypeToken<CxMt>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ContentMachineTranslate0RequestBuilder {
        private final String html;
        private final String fromLang;
        private final String toLang;
        private final String provider;

        private ContentMachineTranslate0RequestBuilder(String html, String fromLang, String toLang, String provider) {
            this.html = html;
            this.fromLang = fromLang;
            this.toLang = toLang;
            this.provider = provider;
        }

        /**
         * Build call for contentMachineTranslate_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The translated content </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TransformContentMachineTranslateRequest transformContentMachineTranslateRequest = buildBodyParams();
            return contentMachineTranslate_0Call(fromLang, toLang, provider, transformContentMachineTranslateRequest, _callback);
        }

        private TransformContentMachineTranslateRequest buildBodyParams() {
            TransformContentMachineTranslateRequest transformContentMachineTranslateRequest = new TransformContentMachineTranslateRequest();
            transformContentMachineTranslateRequest.html(this.html);
            return transformContentMachineTranslateRequest;
        }

        /**
         * Execute contentMachineTranslate_0 request
         * @return CxMt
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The translated content </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public CxMt execute() throws ApiException {
            TransformContentMachineTranslateRequest transformContentMachineTranslateRequest = buildBodyParams();
            ApiResponse<CxMt> localVarResp = contentMachineTranslate_0WithHttpInfo(fromLang, toLang, provider, transformContentMachineTranslateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute contentMachineTranslate_0 request with HTTP info returned
         * @return ApiResponse&lt;CxMt&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The translated content </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CxMt> executeWithHttpInfo() throws ApiException {
            TransformContentMachineTranslateRequest transformContentMachineTranslateRequest = buildBodyParams();
            return contentMachineTranslate_0WithHttpInfo(fromLang, toLang, provider, transformContentMachineTranslateRequest);
        }

        /**
         * Execute contentMachineTranslate_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The translated content </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CxMt> _callback) throws ApiException {
            TransformContentMachineTranslateRequest transformContentMachineTranslateRequest = buildBodyParams();
            return contentMachineTranslate_0Async(fromLang, toLang, provider, transformContentMachineTranslateRequest, _callback);
        }
    }

    /**
     * Machine-translate content
     * Fetches the machine translation for the posted content from the source to the destination language.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param fromLang The source language code (required)
     * @param toLang The target language code (required)
     * @param provider The machine translation provider id (required)
     * @param transformContentMachineTranslateRequest  (required)
     * @return ContentMachineTranslate0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The translated content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ContentMachineTranslate0RequestBuilder contentMachineTranslate_0(String html, String fromLang, String toLang, String provider) throws IllegalArgumentException {
        if (html == null) throw new IllegalArgumentException("\"html\" is required but got null");
            

        if (fromLang == null) throw new IllegalArgumentException("\"fromLang\" is required but got null");
            

        if (toLang == null) throw new IllegalArgumentException("\"toLang\" is required but got null");
            

        if (provider == null) throw new IllegalArgumentException("\"provider\" is required but got null");
            

        return new ContentMachineTranslate0RequestBuilder(html, fromLang, toLang, provider);
    }
    private okhttp3.Call getDictionaryMeaningCall(String fromLang, String toLang, String word, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transform/word/from/{from_lang}/to/{to_lang}/{word}"
            .replace("{" + "from_lang" + "}", localVarApiClient.escapeString(fromLang.toString()))
            .replace("{" + "to_lang" + "}", localVarApiClient.escapeString(toLang.toString()))
            .replace("{" + "word" + "}", localVarApiClient.escapeString(word.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDictionaryMeaningValidateBeforeCall(String fromLang, String toLang, String word, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fromLang' is set
        if (fromLang == null) {
            throw new ApiException("Missing the required parameter 'fromLang' when calling getDictionaryMeaning(Async)");
        }

        // verify the required parameter 'toLang' is set
        if (toLang == null) {
            throw new ApiException("Missing the required parameter 'toLang' when calling getDictionaryMeaning(Async)");
        }

        // verify the required parameter 'word' is set
        if (word == null) {
            throw new ApiException("Missing the required parameter 'word' when calling getDictionaryMeaning(Async)");
        }

        return getDictionaryMeaningCall(fromLang, toLang, word, _callback);

    }


    private ApiResponse<CxDict> getDictionaryMeaningWithHttpInfo(String fromLang, String toLang, String word) throws ApiException {
        okhttp3.Call localVarCall = getDictionaryMeaningValidateBeforeCall(fromLang, toLang, word, null);
        Type localVarReturnType = new TypeToken<CxDict>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDictionaryMeaningAsync(String fromLang, String toLang, String word, final ApiCallback<CxDict> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDictionaryMeaningValidateBeforeCall(fromLang, toLang, word, _callback);
        Type localVarReturnType = new TypeToken<CxDict>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDictionaryMeaningRequestBuilder {
        private final String fromLang;
        private final String toLang;
        private final String word;

        private GetDictionaryMeaningRequestBuilder(String fromLang, String toLang, String word) {
            this.fromLang = fromLang;
            this.toLang = toLang;
            this.word = word;
        }

        /**
         * Build call for getDictionaryMeaning
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> the dictionary translation for the given word </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDictionaryMeaningCall(fromLang, toLang, word, _callback);
        }


        /**
         * Execute getDictionaryMeaning request
         * @return CxDict
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> the dictionary translation for the given word </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public CxDict execute() throws ApiException {
            ApiResponse<CxDict> localVarResp = getDictionaryMeaningWithHttpInfo(fromLang, toLang, word);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDictionaryMeaning request with HTTP info returned
         * @return ApiResponse&lt;CxDict&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> the dictionary translation for the given word </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CxDict> executeWithHttpInfo() throws ApiException {
            return getDictionaryMeaningWithHttpInfo(fromLang, toLang, word);
        }

        /**
         * Execute getDictionaryMeaning request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> the dictionary translation for the given word </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CxDict> _callback) throws ApiException {
            return getDictionaryMeaningAsync(fromLang, toLang, word, _callback);
        }
    }

    /**
     * Fetch the dictionary meaning of a word
     * Fetches the dictionary meaning of a word from a language and displays it in the target language.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param fromLang The source language code (required)
     * @param toLang The target language code (required)
     * @param word The word to lookup (required)
     * @return GetDictionaryMeaningRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the dictionary translation for the given word </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public GetDictionaryMeaningRequestBuilder getDictionaryMeaning(String fromLang, String toLang, String word) throws IllegalArgumentException {
        if (fromLang == null) throw new IllegalArgumentException("\"fromLang\" is required but got null");
            

        if (toLang == null) throw new IllegalArgumentException("\"toLang\" is required but got null");
            

        if (word == null) throw new IllegalArgumentException("\"word\" is required but got null");
            

        return new GetDictionaryMeaningRequestBuilder(fromLang, toLang, word);
    }
    private okhttp3.Call getDictionaryMeaning_0Call(String fromLang, String toLang, String word, String provider, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transform/word/from/{from_lang}/to/{to_lang}/{word}/{provider}"
            .replace("{" + "from_lang" + "}", localVarApiClient.escapeString(fromLang.toString()))
            .replace("{" + "to_lang" + "}", localVarApiClient.escapeString(toLang.toString()))
            .replace("{" + "word" + "}", localVarApiClient.escapeString(word.toString()))
            .replace("{" + "provider" + "}", localVarApiClient.escapeString(provider.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDictionaryMeaning_0ValidateBeforeCall(String fromLang, String toLang, String word, String provider, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fromLang' is set
        if (fromLang == null) {
            throw new ApiException("Missing the required parameter 'fromLang' when calling getDictionaryMeaning_0(Async)");
        }

        // verify the required parameter 'toLang' is set
        if (toLang == null) {
            throw new ApiException("Missing the required parameter 'toLang' when calling getDictionaryMeaning_0(Async)");
        }

        // verify the required parameter 'word' is set
        if (word == null) {
            throw new ApiException("Missing the required parameter 'word' when calling getDictionaryMeaning_0(Async)");
        }

        // verify the required parameter 'provider' is set
        if (provider == null) {
            throw new ApiException("Missing the required parameter 'provider' when calling getDictionaryMeaning_0(Async)");
        }

        return getDictionaryMeaning_0Call(fromLang, toLang, word, provider, _callback);

    }


    private ApiResponse<CxDict> getDictionaryMeaning_0WithHttpInfo(String fromLang, String toLang, String word, String provider) throws ApiException {
        okhttp3.Call localVarCall = getDictionaryMeaning_0ValidateBeforeCall(fromLang, toLang, word, provider, null);
        Type localVarReturnType = new TypeToken<CxDict>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDictionaryMeaning_0Async(String fromLang, String toLang, String word, String provider, final ApiCallback<CxDict> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDictionaryMeaning_0ValidateBeforeCall(fromLang, toLang, word, provider, _callback);
        Type localVarReturnType = new TypeToken<CxDict>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDictionaryMeaning0RequestBuilder {
        private final String fromLang;
        private final String toLang;
        private final String word;
        private final String provider;

        private GetDictionaryMeaning0RequestBuilder(String fromLang, String toLang, String word, String provider) {
            this.fromLang = fromLang;
            this.toLang = toLang;
            this.word = word;
            this.provider = provider;
        }

        /**
         * Build call for getDictionaryMeaning_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> the dictionary translation for the given word </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDictionaryMeaning_0Call(fromLang, toLang, word, provider, _callback);
        }


        /**
         * Execute getDictionaryMeaning_0 request
         * @return CxDict
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> the dictionary translation for the given word </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public CxDict execute() throws ApiException {
            ApiResponse<CxDict> localVarResp = getDictionaryMeaning_0WithHttpInfo(fromLang, toLang, word, provider);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDictionaryMeaning_0 request with HTTP info returned
         * @return ApiResponse&lt;CxDict&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> the dictionary translation for the given word </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CxDict> executeWithHttpInfo() throws ApiException {
            return getDictionaryMeaning_0WithHttpInfo(fromLang, toLang, word, provider);
        }

        /**
         * Execute getDictionaryMeaning_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> the dictionary translation for the given word </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CxDict> _callback) throws ApiException {
            return getDictionaryMeaning_0Async(fromLang, toLang, word, provider, _callback);
        }
    }

    /**
     * Fetch the dictionary meaning of a word
     * Fetches the dictionary meaning of a word from a language and displays it in the target language.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param fromLang The source language code (required)
     * @param toLang The target language code (required)
     * @param word The word to lookup (required)
     * @param provider The dictionary provider id (required)
     * @return GetDictionaryMeaning0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the dictionary translation for the given word </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public GetDictionaryMeaning0RequestBuilder getDictionaryMeaning_0(String fromLang, String toLang, String word, String provider) throws IllegalArgumentException {
        if (fromLang == null) throw new IllegalArgumentException("\"fromLang\" is required but got null");
            

        if (toLang == null) throw new IllegalArgumentException("\"toLang\" is required but got null");
            

        if (word == null) throw new IllegalArgumentException("\"word\" is required but got null");
            

        if (provider == null) throw new IllegalArgumentException("\"provider\" is required but got null");
            

        return new GetDictionaryMeaning0RequestBuilder(fromLang, toLang, word, provider);
    }
    private okhttp3.Call getListToolLanguagePairsCall(String tool, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transform/list/tool/{tool}"
            .replace("{" + "tool" + "}", localVarApiClient.escapeString(tool.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListToolLanguagePairsValidateBeforeCall(String tool, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tool' is set
        if (tool == null) {
            throw new ApiException("Missing the required parameter 'tool' when calling getListToolLanguagePairs(Async)");
        }

        return getListToolLanguagePairsCall(tool, _callback);

    }


    private ApiResponse<Object> getListToolLanguagePairsWithHttpInfo(String tool) throws ApiException {
        okhttp3.Call localVarCall = getListToolLanguagePairsValidateBeforeCall(tool, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListToolLanguagePairsAsync(String tool, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListToolLanguagePairsValidateBeforeCall(tool, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListToolLanguagePairsRequestBuilder {
        private final String tool;

        private GetListToolLanguagePairsRequestBuilder(String tool) {
            this.tool = tool;
        }

        /**
         * Build call for getListToolLanguagePairs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> the list of language pairs available for a given translation tool </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListToolLanguagePairsCall(tool, _callback);
        }


        /**
         * Execute getListToolLanguagePairs request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> the list of language pairs available for a given translation tool </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getListToolLanguagePairsWithHttpInfo(tool);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getListToolLanguagePairs request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> the list of language pairs available for a given translation tool </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getListToolLanguagePairsWithHttpInfo(tool);
        }

        /**
         * Execute getListToolLanguagePairs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> the list of language pairs available for a given translation tool </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getListToolLanguagePairsAsync(tool, _callback);
        }
    }

    /**
     * Lists the tools and language pairs available for the given tool category
     * Fetches the list of tools and all of the language pairs it can translate  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param tool The tool category to list tools and language pairs for (required)
     * @return GetListToolLanguagePairsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of language pairs available for a given translation tool </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public GetListToolLanguagePairsRequestBuilder getListToolLanguagePairs(String tool) throws IllegalArgumentException {
        if (tool == null) throw new IllegalArgumentException("\"tool\" is required but got null");
            

        return new GetListToolLanguagePairsRequestBuilder(tool);
    }
    private okhttp3.Call languagePairListCall(String from, String to, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transform/list/pair/{from}/{to}"
            .replace("{" + "from" + "}", localVarApiClient.escapeString(from.toString()))
            .replace("{" + "to" + "}", localVarApiClient.escapeString(to.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call languagePairListValidateBeforeCall(String from, String to, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling languagePairList(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling languagePairList(Async)");
        }

        return languagePairListCall(from, to, _callback);

    }


    private ApiResponse<CxListTools> languagePairListWithHttpInfo(String from, String to) throws ApiException {
        okhttp3.Call localVarCall = languagePairListValidateBeforeCall(from, to, null);
        Type localVarReturnType = new TypeToken<CxListTools>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call languagePairListAsync(String from, String to, final ApiCallback<CxListTools> _callback) throws ApiException {

        okhttp3.Call localVarCall = languagePairListValidateBeforeCall(from, to, _callback);
        Type localVarReturnType = new TypeToken<CxListTools>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class LanguagePairListRequestBuilder {
        private final String from;
        private final String to;

        private LanguagePairListRequestBuilder(String from, String to) {
            this.from = from;
            this.to = to;
        }

        /**
         * Build call for languagePairList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> the list of tools available for the language pair </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return languagePairListCall(from, to, _callback);
        }


        /**
         * Execute languagePairList request
         * @return CxListTools
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> the list of tools available for the language pair </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public CxListTools execute() throws ApiException {
            ApiResponse<CxListTools> localVarResp = languagePairListWithHttpInfo(from, to);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute languagePairList request with HTTP info returned
         * @return ApiResponse&lt;CxListTools&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> the list of tools available for the language pair </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CxListTools> executeWithHttpInfo() throws ApiException {
            return languagePairListWithHttpInfo(from, to);
        }

        /**
         * Execute languagePairList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> the list of tools available for the language pair </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CxListTools> _callback) throws ApiException {
            return languagePairListAsync(from, to, _callback);
        }
    }

    /**
     * Lists the tools available for a language pair
     * Fetches the list of tools that are available for the given pair of languages.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param from The source language code (required)
     * @param to The target language code (required)
     * @return LanguagePairListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of tools available for the language pair </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public LanguagePairListRequestBuilder languagePairList(String from, String to) throws IllegalArgumentException {
        if (from == null) throw new IllegalArgumentException("\"from\" is required but got null");
            

        if (to == null) throw new IllegalArgumentException("\"to\" is required but got null");
            

        return new LanguagePairListRequestBuilder(from, to);
    }
    private okhttp3.Call listLanguagePairsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transform/list/languagepairs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLanguagePairsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listLanguagePairsCall(_callback);

    }


    private ApiResponse<CxLanguagepairs> listLanguagePairsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listLanguagePairsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CxLanguagepairs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listLanguagePairsAsync(final ApiCallback<CxLanguagepairs> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLanguagePairsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CxLanguagepairs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListLanguagePairsRequestBuilder {

        private ListLanguagePairsRequestBuilder() {
        }

        /**
         * Build call for listLanguagePairs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> the list of source and target languages supported by the API </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listLanguagePairsCall(_callback);
        }


        /**
         * Execute listLanguagePairs request
         * @return CxLanguagepairs
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> the list of source and target languages supported by the API </td><td>  -  </td></tr>
         </table>
         */
        public CxLanguagepairs execute() throws ApiException {
            ApiResponse<CxLanguagepairs> localVarResp = listLanguagePairsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listLanguagePairs request with HTTP info returned
         * @return ApiResponse&lt;CxLanguagepairs&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> the list of source and target languages supported by the API </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CxLanguagepairs> executeWithHttpInfo() throws ApiException {
            return listLanguagePairsWithHttpInfo();
        }

        /**
         * Execute listLanguagePairs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> the list of source and target languages supported by the API </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CxLanguagepairs> _callback) throws ApiException {
            return listLanguagePairsAsync(_callback);
        }
    }

    /**
     * Lists the language pairs supported by the back-end
     * Fetches the list of language pairs the back-end service can translate  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @return ListLanguagePairsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of source and target languages supported by the API </td><td>  -  </td></tr>
     </table>
     */
    public ListLanguagePairsRequestBuilder listLanguagePairs() throws IllegalArgumentException {
        return new ListLanguagePairsRequestBuilder();
    }
    private okhttp3.Call toolLanguagePairsListCall(String tool, String from, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transform/list/tool/{tool}/{from}"
            .replace("{" + "tool" + "}", localVarApiClient.escapeString(tool.toString()))
            .replace("{" + "from" + "}", localVarApiClient.escapeString(from.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolLanguagePairsListValidateBeforeCall(String tool, String from, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tool' is set
        if (tool == null) {
            throw new ApiException("Missing the required parameter 'tool' when calling toolLanguagePairsList(Async)");
        }

        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling toolLanguagePairsList(Async)");
        }

        return toolLanguagePairsListCall(tool, from, _callback);

    }


    private ApiResponse<Object> toolLanguagePairsListWithHttpInfo(String tool, String from) throws ApiException {
        okhttp3.Call localVarCall = toolLanguagePairsListValidateBeforeCall(tool, from, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call toolLanguagePairsListAsync(String tool, String from, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolLanguagePairsListValidateBeforeCall(tool, from, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ToolLanguagePairsListRequestBuilder {
        private final String tool;
        private final String from;

        private ToolLanguagePairsListRequestBuilder(String tool, String from) {
            this.tool = tool;
            this.from = from;
        }

        /**
         * Build call for toolLanguagePairsList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> the list of language pairs available for a given translation tool </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return toolLanguagePairsListCall(tool, from, _callback);
        }


        /**
         * Execute toolLanguagePairsList request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> the list of language pairs available for a given translation tool </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = toolLanguagePairsListWithHttpInfo(tool, from);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute toolLanguagePairsList request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> the list of language pairs available for a given translation tool </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return toolLanguagePairsListWithHttpInfo(tool, from);
        }

        /**
         * Execute toolLanguagePairsList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> the list of language pairs available for a given translation tool </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return toolLanguagePairsListAsync(tool, from, _callback);
        }
    }

    /**
     * Lists the tools and language pairs available for the given tool category
     * Fetches the list of tools and all of the language pairs it can translate  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param tool The tool category to list tools and language pairs for (required)
     * @param from The source language code (required)
     * @return ToolLanguagePairsListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of language pairs available for a given translation tool </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ToolLanguagePairsListRequestBuilder toolLanguagePairsList(String tool, String from) throws IllegalArgumentException {
        if (tool == null) throw new IllegalArgumentException("\"tool\" is required but got null");
            

        if (from == null) throw new IllegalArgumentException("\"from\" is required but got null");
            

        return new ToolLanguagePairsListRequestBuilder(tool, from);
    }
    private okhttp3.Call toolLanguagePairsList_0Call(String tool, String from, String to, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transform/list/tool/{tool}/{from}/{to}"
            .replace("{" + "tool" + "}", localVarApiClient.escapeString(tool.toString()))
            .replace("{" + "from" + "}", localVarApiClient.escapeString(from.toString()))
            .replace("{" + "to" + "}", localVarApiClient.escapeString(to.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolLanguagePairsList_0ValidateBeforeCall(String tool, String from, String to, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tool' is set
        if (tool == null) {
            throw new ApiException("Missing the required parameter 'tool' when calling toolLanguagePairsList_0(Async)");
        }

        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling toolLanguagePairsList_0(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling toolLanguagePairsList_0(Async)");
        }

        return toolLanguagePairsList_0Call(tool, from, to, _callback);

    }


    private ApiResponse<Object> toolLanguagePairsList_0WithHttpInfo(String tool, String from, String to) throws ApiException {
        okhttp3.Call localVarCall = toolLanguagePairsList_0ValidateBeforeCall(tool, from, to, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call toolLanguagePairsList_0Async(String tool, String from, String to, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolLanguagePairsList_0ValidateBeforeCall(tool, from, to, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ToolLanguagePairsList0RequestBuilder {
        private final String tool;
        private final String from;
        private final String to;

        private ToolLanguagePairsList0RequestBuilder(String tool, String from, String to) {
            this.tool = tool;
            this.from = from;
            this.to = to;
        }

        /**
         * Build call for toolLanguagePairsList_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> the list of language pairs available for a given translation tool </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return toolLanguagePairsList_0Call(tool, from, to, _callback);
        }


        /**
         * Execute toolLanguagePairsList_0 request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> the list of language pairs available for a given translation tool </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = toolLanguagePairsList_0WithHttpInfo(tool, from, to);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute toolLanguagePairsList_0 request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> the list of language pairs available for a given translation tool </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return toolLanguagePairsList_0WithHttpInfo(tool, from, to);
        }

        /**
         * Execute toolLanguagePairsList_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> the list of language pairs available for a given translation tool </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return toolLanguagePairsList_0Async(tool, from, to, _callback);
        }
    }

    /**
     * Lists the tools and language pairs available for the given tool category
     * Fetches the list of tools and all of the language pairs it can translate  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @param tool The tool category to list tools and language pairs for (required)
     * @param from The source language code (required)
     * @param to The target language code (required)
     * @return ToolLanguagePairsList0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of language pairs available for a given translation tool </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ToolLanguagePairsList0RequestBuilder toolLanguagePairsList_0(String tool, String from, String to) throws IllegalArgumentException {
        if (tool == null) throw new IllegalArgumentException("\"tool\" is required but got null");
            

        if (from == null) throw new IllegalArgumentException("\"from\" is required but got null");
            

        if (to == null) throw new IllegalArgumentException("\"to\" is required but got null");
            

        return new ToolLanguagePairsList0RequestBuilder(tool, from, to);
    }
}
