/*
 * Wikimedia
 * This API provides cacheable and straightforward access to Wikimedia content and data, in machine-readable formats. ### Global Rules - Limit your clients to no more than 200 requests/s to this API.   Each API endpoint's documentation may detail more specific usage limits. - Set a unique `User-Agent` or `Api-User-Agent` header that   allows us to contact you quickly. Email addresses or URLs   of contact pages work well.  By using this API, you agree to Wikimedia's  [Terms of Use](https://wikimediafoundation.org/wiki/Terms_of_Use) and [Privacy Policy](https://wikimediafoundation.org/wiki/Privacy_policy). Unless otherwise specified in the endpoint documentation below, content accessed via this API is licensed under the [CC-BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/)  and [GFDL](https://www.gnu.org/copyleft/fdl.html) licenses, and you irrevocably agree to release modifications or additions made through this API under these licenses.  See https://www.mediawiki.org/wiki/REST_API for background and details. ### Endpoint documentation Please consult each endpoint's documentation for details on: - Licensing information for the specific type of content   and data served via the endpoint. - Stability markers to inform you about development status and   change policy, according to   [our API version policy](https://www.mediawiki.org/wiki/API_versioning). - Endpoint specific usage limits. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.MathCheckFormulaRequest;
import com.konfigthis.client.model.Problem;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MathApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MathApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public MathApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call checkFormulaCall(String type, String q, MathCheckFormulaRequest mathCheckFormulaRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = mathCheckFormulaRequest;

        // create path and map variables
        String localVarPath = "/media/math/check/{type}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarFormParams.put("q", q);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkFormulaValidateBeforeCall(String type, String q, MathCheckFormulaRequest mathCheckFormulaRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling checkFormula(Async)");
        }

        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling checkFormula(Async)");
        }

        // verify the required parameter 'mathCheckFormulaRequest' is set
        if (mathCheckFormulaRequest == null) {
            throw new ApiException("Missing the required parameter 'mathCheckFormulaRequest' when calling checkFormula(Async)");
        }

        return checkFormulaCall(type, q, mathCheckFormulaRequest, _callback);

    }


    private ApiResponse<Void> checkFormulaWithHttpInfo(String type, String q, MathCheckFormulaRequest mathCheckFormulaRequest) throws ApiException {
        okhttp3.Call localVarCall = checkFormulaValidateBeforeCall(type, q, mathCheckFormulaRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call checkFormulaAsync(String type, String q, MathCheckFormulaRequest mathCheckFormulaRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkFormulaValidateBeforeCall(type, q, mathCheckFormulaRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CheckFormulaRequestBuilder {
        private final String type;
        private final String q;

        private CheckFormulaRequestBuilder(String type, String q) {
            this.type = type;
            this.q = q;
        }

        /**
         * Build call for checkFormula
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Information about the checked formula </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MathCheckFormulaRequest mathCheckFormulaRequest = buildBodyParams();
            return checkFormulaCall(type, q, mathCheckFormulaRequest, _callback);
        }

        private MathCheckFormulaRequest buildBodyParams() {
            MathCheckFormulaRequest mathCheckFormulaRequest = new MathCheckFormulaRequest();
            mathCheckFormulaRequest.q(this.q);
            return mathCheckFormulaRequest;
        }

        /**
         * Execute checkFormula request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Information about the checked formula </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MathCheckFormulaRequest mathCheckFormulaRequest = buildBodyParams();
            checkFormulaWithHttpInfo(type, q, mathCheckFormulaRequest);
        }

        /**
         * Execute checkFormula request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Information about the checked formula </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MathCheckFormulaRequest mathCheckFormulaRequest = buildBodyParams();
            return checkFormulaWithHttpInfo(type, q, mathCheckFormulaRequest);
        }

        /**
         * Execute checkFormula request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Information about the checked formula </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MathCheckFormulaRequest mathCheckFormulaRequest = buildBodyParams();
            return checkFormulaAsync(type, q, mathCheckFormulaRequest, _callback);
        }
    }

    /**
     * Check and normalize a TeX formula.
     * Checks the supplied TeX formula for correctness and returns the normalised formula representation as well as information about identifiers. Available types are tex and inline-tex. The response contains the &#x60;x-resource-location&#x60; header which can be used to retrieve the render of the checked formula in one of the supported rendering formats. Just append the value of the header to &#x60;/media/math/{format}/&#x60; and perform a GET request against that URL.  Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable). 
     * @param type The input type of the given formula; can be tex or inline-tex (required)
     * @param q The formula to check (required)
     * @param mathCheckFormulaRequest  (required)
     * @return CheckFormulaRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about the checked formula </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CheckFormulaRequestBuilder checkFormula(String type, String q) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (q == null) throw new IllegalArgumentException("\"q\" is required but got null");
            

        return new CheckFormulaRequestBuilder(type, q);
    }
    private okhttp3.Call getFormulaByHashCall(String hash, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/media/math/formula/{hash}"
            .replace("{" + "hash" + "}", localVarApiClient.escapeString(hash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFormulaByHashValidateBeforeCall(String hash, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hash' is set
        if (hash == null) {
            throw new ApiException("Missing the required parameter 'hash' when calling getFormulaByHash(Async)");
        }

        return getFormulaByHashCall(hash, _callback);

    }


    private ApiResponse<Void> getFormulaByHashWithHttpInfo(String hash) throws ApiException {
        okhttp3.Call localVarCall = getFormulaByHashValidateBeforeCall(hash, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getFormulaByHashAsync(String hash, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFormulaByHashValidateBeforeCall(hash, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetFormulaByHashRequestBuilder {
        private final String hash;

        private GetFormulaByHashRequestBuilder(String hash) {
            this.hash = hash;
        }

        /**
         * Build call for getFormulaByHash
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Information about the checked formula </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFormulaByHashCall(hash, _callback);
        }


        /**
         * Execute getFormulaByHash request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Information about the checked formula </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getFormulaByHashWithHttpInfo(hash);
        }

        /**
         * Execute getFormulaByHash request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Information about the checked formula </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getFormulaByHashWithHttpInfo(hash);
        }

        /**
         * Execute getFormulaByHash request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Information about the checked formula </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getFormulaByHashAsync(hash, _callback);
        }
    }

    /**
     * Get a previously-stored formula
     * Returns the previously-stored formula via &#x60;/media/math/check/{type}&#x60; for the given hash.  Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable). 
     * @param hash The hash string of the previous POST data (required)
     * @return GetFormulaByHashRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about the checked formula </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public GetFormulaByHashRequestBuilder getFormulaByHash(String hash) throws IllegalArgumentException {
        if (hash == null) throw new IllegalArgumentException("\"hash\" is required but got null");
            if (hash != null && hash.length() < 1) {
              throw new IllegalArgumentException("Invalid value for hash. Length must be greater than or equal to 1.");
            }

        return new GetFormulaByHashRequestBuilder(hash);
    }
    private okhttp3.Call renderFormulaByHashCall(String format, String hash, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/media/math/render/{format}/{hash}"
            .replace("{" + "format" + "}", localVarApiClient.escapeString(format.toString()))
            .replace("{" + "hash" + "}", localVarApiClient.escapeString(hash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "image/svg+xml",
            "application/mathml+xml",
            "image/png",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call renderFormulaByHashValidateBeforeCall(String format, String hash, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling renderFormulaByHash(Async)");
        }

        // verify the required parameter 'hash' is set
        if (hash == null) {
            throw new ApiException("Missing the required parameter 'hash' when calling renderFormulaByHash(Async)");
        }

        return renderFormulaByHashCall(format, hash, _callback);

    }


    private ApiResponse<Void> renderFormulaByHashWithHttpInfo(String format, String hash) throws ApiException {
        okhttp3.Call localVarCall = renderFormulaByHashValidateBeforeCall(format, hash, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call renderFormulaByHashAsync(String format, String hash, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = renderFormulaByHashValidateBeforeCall(format, hash, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RenderFormulaByHashRequestBuilder {
        private final String format;
        private final String hash;

        private RenderFormulaByHashRequestBuilder(String format, String hash) {
            this.format = format;
            this.hash = hash;
        }

        /**
         * Build call for renderFormulaByHash
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The rendered formula </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return renderFormulaByHashCall(format, hash, _callback);
        }


        /**
         * Execute renderFormulaByHash request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The rendered formula </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            renderFormulaByHashWithHttpInfo(format, hash);
        }

        /**
         * Execute renderFormulaByHash request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The rendered formula </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return renderFormulaByHashWithHttpInfo(format, hash);
        }

        /**
         * Execute renderFormulaByHash request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The rendered formula </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return renderFormulaByHashAsync(format, hash, _callback);
        }
    }

    /**
     * Get rendered formula in the given format.
     * Given a request hash, renders a TeX formula into its mathematic representation in the given format. When a request is issued to the &#x60;/media/math/check/{format}&#x60; POST endpoint, the response contains the &#x60;x-resource-location&#x60; header denoting the hash ID of the POST data. Once obtained, this endpoint has to be used to obtain the actual render.  Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable). 
     * @param format The output format; can be svg or mml (required)
     * @param hash The hash string of the previous POST data (required)
     * @return RenderFormulaByHashRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The rendered formula </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public RenderFormulaByHashRequestBuilder renderFormulaByHash(String format, String hash) throws IllegalArgumentException {
        if (format == null) throw new IllegalArgumentException("\"format\" is required but got null");
            

        if (hash == null) throw new IllegalArgumentException("\"hash\" is required but got null");
            if (hash != null && hash.length() < 1) {
              throw new IllegalArgumentException("Invalid value for hash. Length must be greater than or equal to 1.");
            }

        return new RenderFormulaByHashRequestBuilder(format, hash);
    }
}
