/*
 * Wikimedia
 * This API provides cacheable and straightforward access to Wikimedia content and data, in machine-readable formats. ### Global Rules - Limit your clients to no more than 200 requests/s to this API.   Each API endpoint's documentation may detail more specific usage limits. - Set a unique `User-Agent` or `Api-User-Agent` header that   allows us to contact you quickly. Email addresses or URLs   of contact pages work well.  By using this API, you agree to Wikimedia's  [Terms of Use](https://wikimediafoundation.org/wiki/Terms_of_Use) and [Privacy Policy](https://wikimediafoundation.org/wiki/Privacy_policy). Unless otherwise specified in the endpoint documentation below, content accessed via this API is licensed under the [CC-BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/)  and [GFDL](https://www.gnu.org/copyleft/fdl.html) licenses, and you irrevocably agree to release modifications or additions made through this API under these licenses.  See https://www.mediawiki.org/wiki/REST_API for background and details. ### Endpoint documentation Please consult each endpoint's documentation for details on: - Licensing information for the specific type of content   and data served via the endpoint. - Stability markers to inform you about development status and   change policy, according to   [our API version policy](https://www.mediawiki.org/wiki/API_versioning). - Endpoint specific usage limits. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Editors;
import com.konfigthis.client.model.Problem;
import com.konfigthis.client.model.TopEditorsByAbsBytesDiff;
import com.konfigthis.client.model.TopEditorsByEdits;
import com.konfigthis.client.model.TopEditorsByNetBytesDiff;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EditorsDataApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EditorsDataApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EditorsDataApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getEditorsCountsForProjectCall(String project, String editorType, String pageType, String activityLevel, String granularity, String start, String end, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metrics/editors/aggregate/{project}/{editor-type}/{page-type}/{activity-level}/{granularity}/{start}/{end}"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "editor-type" + "}", localVarApiClient.escapeString(editorType.toString()))
            .replace("{" + "page-type" + "}", localVarApiClient.escapeString(pageType.toString()))
            .replace("{" + "activity-level" + "}", localVarApiClient.escapeString(activityLevel.toString()))
            .replace("{" + "granularity" + "}", localVarApiClient.escapeString(granularity.toString()))
            .replace("{" + "start" + "}", localVarApiClient.escapeString(start.toString()))
            .replace("{" + "end" + "}", localVarApiClient.escapeString(end.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEditorsCountsForProjectValidateBeforeCall(String project, String editorType, String pageType, String activityLevel, String granularity, String start, String end, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling getEditorsCountsForProject(Async)");
        }

        // verify the required parameter 'editorType' is set
        if (editorType == null) {
            throw new ApiException("Missing the required parameter 'editorType' when calling getEditorsCountsForProject(Async)");
        }

        // verify the required parameter 'pageType' is set
        if (pageType == null) {
            throw new ApiException("Missing the required parameter 'pageType' when calling getEditorsCountsForProject(Async)");
        }

        // verify the required parameter 'activityLevel' is set
        if (activityLevel == null) {
            throw new ApiException("Missing the required parameter 'activityLevel' when calling getEditorsCountsForProject(Async)");
        }

        // verify the required parameter 'granularity' is set
        if (granularity == null) {
            throw new ApiException("Missing the required parameter 'granularity' when calling getEditorsCountsForProject(Async)");
        }

        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getEditorsCountsForProject(Async)");
        }

        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getEditorsCountsForProject(Async)");
        }

        return getEditorsCountsForProjectCall(project, editorType, pageType, activityLevel, granularity, start, end, _callback);

    }


    private ApiResponse<Object> getEditorsCountsForProjectWithHttpInfo(String project, String editorType, String pageType, String activityLevel, String granularity, String start, String end) throws ApiException {
        okhttp3.Call localVarCall = getEditorsCountsForProjectValidateBeforeCall(project, editorType, pageType, activityLevel, granularity, start, end, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEditorsCountsForProjectAsync(String project, String editorType, String pageType, String activityLevel, String granularity, String start, String end, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEditorsCountsForProjectValidateBeforeCall(project, editorType, pageType, activityLevel, granularity, start, end, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEditorsCountsForProjectRequestBuilder {
        private final String project;
        private final String editorType;
        private final String pageType;
        private final String activityLevel;
        private final String granularity;
        private final String start;
        private final String end;

        private GetEditorsCountsForProjectRequestBuilder(String project, String editorType, String pageType, String activityLevel, String granularity, String start, String end) {
            this.project = project;
            this.editorType = editorType;
            this.pageType = pageType;
            this.activityLevel = activityLevel;
            this.granularity = granularity;
            this.start = start;
            this.end = end;
        }

        /**
         * Build call for getEditorsCountsForProject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of values </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEditorsCountsForProjectCall(project, editorType, pageType, activityLevel, granularity, start, end, _callback);
        }


        /**
         * Execute getEditorsCountsForProject request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of values </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getEditorsCountsForProjectWithHttpInfo(project, editorType, pageType, activityLevel, granularity, start, end);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEditorsCountsForProject request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of values </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getEditorsCountsForProjectWithHttpInfo(project, editorType, pageType, activityLevel, granularity, start, end);
        }

        /**
         * Execute getEditorsCountsForProject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of values </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getEditorsCountsForProjectAsync(project, editorType, pageType, activityLevel, granularity, start, end, _callback);
        }
    }

    /**
     * Get editors counts for a project.
     * Given a Mediawiki project and a date range, returns a timeseries of its editors counts. You can filter by editory-type (all-editor-types, anonymous, group-bot, name-bot, user), page-type (all-page-types, content or non-content) or activity-level (1..4-edits, 5..24-edits, 25..99-edits or 100..-edits). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @param project The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off.  For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org.  (required)
     * @param editorType If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types.  (required)
     * @param pageType If you want to filter by page-type, use one of content (edits made in content namespaces) or non-content (edits made in non-content namespaces). If you are interested in editors regardless of their page-type, use all-page-types.  (required)
     * @param activityLevel If you want to filter by activity-level, use one of 1..4-edits, 5..24-edits, 25..99-edits or 100..-edits. If you are interested in editors regardless of their activity-level, use all-activity-levels.  (required)
     * @param granularity The time unit for the response data. As of today, supported values are daily and monthly.  (required)
     * @param start The date of the first day to include, in YYYYMMDD format (required)
     * @param end The date of the last day to include, in YYYYMMDD format (required)
     * @return GetEditorsCountsForProjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of values </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public GetEditorsCountsForProjectRequestBuilder getEditorsCountsForProject(String project, String editorType, String pageType, String activityLevel, String granularity, String start, String end) throws IllegalArgumentException {
        if (project == null) throw new IllegalArgumentException("\"project\" is required but got null");
            

        if (editorType == null) throw new IllegalArgumentException("\"editorType\" is required but got null");
            

        if (pageType == null) throw new IllegalArgumentException("\"pageType\" is required but got null");
            

        if (activityLevel == null) throw new IllegalArgumentException("\"activityLevel\" is required but got null");
            

        if (granularity == null) throw new IllegalArgumentException("\"granularity\" is required but got null");
            

        if (start == null) throw new IllegalArgumentException("\"start\" is required but got null");
            

        if (end == null) throw new IllegalArgumentException("\"end\" is required but got null");
            

        return new GetEditorsCountsForProjectRequestBuilder(project, editorType, pageType, activityLevel, granularity, start, end);
    }
    private okhttp3.Call getTopByAbsoluteBytesDifferenceCall(String project, String editorType, String pageType, String year, String month, String day, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metrics/editors/top-by-absolute-bytes-difference/{project}/{editor-type}/{page-type}/{year}/{month}/{day}"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "editor-type" + "}", localVarApiClient.escapeString(editorType.toString()))
            .replace("{" + "page-type" + "}", localVarApiClient.escapeString(pageType.toString()))
            .replace("{" + "year" + "}", localVarApiClient.escapeString(year.toString()))
            .replace("{" + "month" + "}", localVarApiClient.escapeString(month.toString()))
            .replace("{" + "day" + "}", localVarApiClient.escapeString(day.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTopByAbsoluteBytesDifferenceValidateBeforeCall(String project, String editorType, String pageType, String year, String month, String day, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling getTopByAbsoluteBytesDifference(Async)");
        }

        // verify the required parameter 'editorType' is set
        if (editorType == null) {
            throw new ApiException("Missing the required parameter 'editorType' when calling getTopByAbsoluteBytesDifference(Async)");
        }

        // verify the required parameter 'pageType' is set
        if (pageType == null) {
            throw new ApiException("Missing the required parameter 'pageType' when calling getTopByAbsoluteBytesDifference(Async)");
        }

        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling getTopByAbsoluteBytesDifference(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling getTopByAbsoluteBytesDifference(Async)");
        }

        // verify the required parameter 'day' is set
        if (day == null) {
            throw new ApiException("Missing the required parameter 'day' when calling getTopByAbsoluteBytesDifference(Async)");
        }

        return getTopByAbsoluteBytesDifferenceCall(project, editorType, pageType, year, month, day, _callback);

    }


    private ApiResponse<Object> getTopByAbsoluteBytesDifferenceWithHttpInfo(String project, String editorType, String pageType, String year, String month, String day) throws ApiException {
        okhttp3.Call localVarCall = getTopByAbsoluteBytesDifferenceValidateBeforeCall(project, editorType, pageType, year, month, day, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTopByAbsoluteBytesDifferenceAsync(String project, String editorType, String pageType, String year, String month, String day, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTopByAbsoluteBytesDifferenceValidateBeforeCall(project, editorType, pageType, year, month, day, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTopByAbsoluteBytesDifferenceRequestBuilder {
        private final String project;
        private final String editorType;
        private final String pageType;
        private final String year;
        private final String month;
        private final String day;

        private GetTopByAbsoluteBytesDifferenceRequestBuilder(String project, String editorType, String pageType, String year, String month, String day) {
            this.project = project;
            this.editorType = editorType;
            this.pageType = pageType;
            this.year = year;
            this.month = month;
            this.day = day;
        }

        /**
         * Build call for getTopByAbsoluteBytesDifference
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of values </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTopByAbsoluteBytesDifferenceCall(project, editorType, pageType, year, month, day, _callback);
        }


        /**
         * Execute getTopByAbsoluteBytesDifference request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of values </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getTopByAbsoluteBytesDifferenceWithHttpInfo(project, editorType, pageType, year, month, day);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTopByAbsoluteBytesDifference request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of values </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getTopByAbsoluteBytesDifferenceWithHttpInfo(project, editorType, pageType, year, month, day);
        }

        /**
         * Execute getTopByAbsoluteBytesDifference request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of values </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getTopByAbsoluteBytesDifferenceAsync(project, editorType, pageType, year, month, day, _callback);
        }
    }

    /**
     * Get top 100 editors by absolute bytes-difference.
     * Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100 editors by absolute bytes-difference. You can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content). The user_text returned is either the mediawiki user_text if the user is registered, or null if user is anonymous.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @param project The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off. For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org.  (required)
     * @param editorType If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types.  (required)
     * @param pageType If you want to filter by page-type, use one of content (edits on pages in content namespaces) or non-content (edits on pages in non-content namespaces). If you are interested in edits regardless of their page-type, use all-page-types.  (required)
     * @param year The year of the date for which to retrieve top editors, in YYYY format. (required)
     * @param month The month of the date for which to retrieve top editors, in MM format. If you want to get the top editors of a whole month, the day parameter should be all-days. (required)
     * @param day The day of the date for which to retrieve top editors, in DD format, or all-days for a monthly value. (required)
     * @return GetTopByAbsoluteBytesDifferenceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of values </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public GetTopByAbsoluteBytesDifferenceRequestBuilder getTopByAbsoluteBytesDifference(String project, String editorType, String pageType, String year, String month, String day) throws IllegalArgumentException {
        if (project == null) throw new IllegalArgumentException("\"project\" is required but got null");
            

        if (editorType == null) throw new IllegalArgumentException("\"editorType\" is required but got null");
            

        if (pageType == null) throw new IllegalArgumentException("\"pageType\" is required but got null");
            

        if (year == null) throw new IllegalArgumentException("\"year\" is required but got null");
            

        if (month == null) throw new IllegalArgumentException("\"month\" is required but got null");
            

        if (day == null) throw new IllegalArgumentException("\"day\" is required but got null");
            

        return new GetTopByAbsoluteBytesDifferenceRequestBuilder(project, editorType, pageType, year, month, day);
    }
    private okhttp3.Call getTopByNetBytesDifferenceCall(String project, String editorType, String pageType, String year, String month, String day, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metrics/editors/top-by-net-bytes-difference/{project}/{editor-type}/{page-type}/{year}/{month}/{day}"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "editor-type" + "}", localVarApiClient.escapeString(editorType.toString()))
            .replace("{" + "page-type" + "}", localVarApiClient.escapeString(pageType.toString()))
            .replace("{" + "year" + "}", localVarApiClient.escapeString(year.toString()))
            .replace("{" + "month" + "}", localVarApiClient.escapeString(month.toString()))
            .replace("{" + "day" + "}", localVarApiClient.escapeString(day.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTopByNetBytesDifferenceValidateBeforeCall(String project, String editorType, String pageType, String year, String month, String day, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling getTopByNetBytesDifference(Async)");
        }

        // verify the required parameter 'editorType' is set
        if (editorType == null) {
            throw new ApiException("Missing the required parameter 'editorType' when calling getTopByNetBytesDifference(Async)");
        }

        // verify the required parameter 'pageType' is set
        if (pageType == null) {
            throw new ApiException("Missing the required parameter 'pageType' when calling getTopByNetBytesDifference(Async)");
        }

        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling getTopByNetBytesDifference(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling getTopByNetBytesDifference(Async)");
        }

        // verify the required parameter 'day' is set
        if (day == null) {
            throw new ApiException("Missing the required parameter 'day' when calling getTopByNetBytesDifference(Async)");
        }

        return getTopByNetBytesDifferenceCall(project, editorType, pageType, year, month, day, _callback);

    }


    private ApiResponse<Object> getTopByNetBytesDifferenceWithHttpInfo(String project, String editorType, String pageType, String year, String month, String day) throws ApiException {
        okhttp3.Call localVarCall = getTopByNetBytesDifferenceValidateBeforeCall(project, editorType, pageType, year, month, day, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTopByNetBytesDifferenceAsync(String project, String editorType, String pageType, String year, String month, String day, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTopByNetBytesDifferenceValidateBeforeCall(project, editorType, pageType, year, month, day, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTopByNetBytesDifferenceRequestBuilder {
        private final String project;
        private final String editorType;
        private final String pageType;
        private final String year;
        private final String month;
        private final String day;

        private GetTopByNetBytesDifferenceRequestBuilder(String project, String editorType, String pageType, String year, String month, String day) {
            this.project = project;
            this.editorType = editorType;
            this.pageType = pageType;
            this.year = year;
            this.month = month;
            this.day = day;
        }

        /**
         * Build call for getTopByNetBytesDifference
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of values </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTopByNetBytesDifferenceCall(project, editorType, pageType, year, month, day, _callback);
        }


        /**
         * Execute getTopByNetBytesDifference request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of values </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getTopByNetBytesDifferenceWithHttpInfo(project, editorType, pageType, year, month, day);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTopByNetBytesDifference request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of values </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getTopByNetBytesDifferenceWithHttpInfo(project, editorType, pageType, year, month, day);
        }

        /**
         * Execute getTopByNetBytesDifference request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of values </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getTopByNetBytesDifferenceAsync(project, editorType, pageType, year, month, day, _callback);
        }
    }

    /**
     * Get top 100 editors by net bytes-difference.
     * Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100 editors by net bytes-difference. You can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content). The user_text returned is either the mediawiki user_text if the user is registered, or \&quot;Anonymous Editor\&quot; if user is anonymous.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @param project The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off. For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org.  (required)
     * @param editorType If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types.  (required)
     * @param pageType If you want to filter by page-type, use one of content (edits on pages in content namespaces) or non-content (edits on pages in non-content namespaces). If you are interested in edits regardless of their page-type, use all-page-types.  (required)
     * @param year The year of the date for which to retrieve top editors, in YYYY format. (required)
     * @param month The month of the date for which to retrieve top editors, in MM format. If you want to get the top editors of a whole month, the day parameter should be all-days. (required)
     * @param day The day of the date for which to retrieve top editors, in DD format, or all-days for a monthly value. (required)
     * @return GetTopByNetBytesDifferenceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of values </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public GetTopByNetBytesDifferenceRequestBuilder getTopByNetBytesDifference(String project, String editorType, String pageType, String year, String month, String day) throws IllegalArgumentException {
        if (project == null) throw new IllegalArgumentException("\"project\" is required but got null");
            

        if (editorType == null) throw new IllegalArgumentException("\"editorType\" is required but got null");
            

        if (pageType == null) throw new IllegalArgumentException("\"pageType\" is required but got null");
            

        if (year == null) throw new IllegalArgumentException("\"year\" is required but got null");
            

        if (month == null) throw new IllegalArgumentException("\"month\" is required but got null");
            

        if (day == null) throw new IllegalArgumentException("\"day\" is required but got null");
            

        return new GetTopByNetBytesDifferenceRequestBuilder(project, editorType, pageType, year, month, day);
    }
    private okhttp3.Call getTopEditorsByEditsCountCall(String project, String editorType, String pageType, String year, String month, String day, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metrics/editors/top-by-edits/{project}/{editor-type}/{page-type}/{year}/{month}/{day}"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "editor-type" + "}", localVarApiClient.escapeString(editorType.toString()))
            .replace("{" + "page-type" + "}", localVarApiClient.escapeString(pageType.toString()))
            .replace("{" + "year" + "}", localVarApiClient.escapeString(year.toString()))
            .replace("{" + "month" + "}", localVarApiClient.escapeString(month.toString()))
            .replace("{" + "day" + "}", localVarApiClient.escapeString(day.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTopEditorsByEditsCountValidateBeforeCall(String project, String editorType, String pageType, String year, String month, String day, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling getTopEditorsByEditsCount(Async)");
        }

        // verify the required parameter 'editorType' is set
        if (editorType == null) {
            throw new ApiException("Missing the required parameter 'editorType' when calling getTopEditorsByEditsCount(Async)");
        }

        // verify the required parameter 'pageType' is set
        if (pageType == null) {
            throw new ApiException("Missing the required parameter 'pageType' when calling getTopEditorsByEditsCount(Async)");
        }

        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling getTopEditorsByEditsCount(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling getTopEditorsByEditsCount(Async)");
        }

        // verify the required parameter 'day' is set
        if (day == null) {
            throw new ApiException("Missing the required parameter 'day' when calling getTopEditorsByEditsCount(Async)");
        }

        return getTopEditorsByEditsCountCall(project, editorType, pageType, year, month, day, _callback);

    }


    private ApiResponse<Object> getTopEditorsByEditsCountWithHttpInfo(String project, String editorType, String pageType, String year, String month, String day) throws ApiException {
        okhttp3.Call localVarCall = getTopEditorsByEditsCountValidateBeforeCall(project, editorType, pageType, year, month, day, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTopEditorsByEditsCountAsync(String project, String editorType, String pageType, String year, String month, String day, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTopEditorsByEditsCountValidateBeforeCall(project, editorType, pageType, year, month, day, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTopEditorsByEditsCountRequestBuilder {
        private final String project;
        private final String editorType;
        private final String pageType;
        private final String year;
        private final String month;
        private final String day;

        private GetTopEditorsByEditsCountRequestBuilder(String project, String editorType, String pageType, String year, String month, String day) {
            this.project = project;
            this.editorType = editorType;
            this.pageType = pageType;
            this.year = year;
            this.month = month;
            this.day = day;
        }

        /**
         * Build call for getTopEditorsByEditsCount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of values </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTopEditorsByEditsCountCall(project, editorType, pageType, year, month, day, _callback);
        }


        /**
         * Execute getTopEditorsByEditsCount request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of values </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getTopEditorsByEditsCountWithHttpInfo(project, editorType, pageType, year, month, day);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTopEditorsByEditsCount request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of values </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getTopEditorsByEditsCountWithHttpInfo(project, editorType, pageType, year, month, day);
        }

        /**
         * Execute getTopEditorsByEditsCount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of values </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getTopEditorsByEditsCountAsync(project, editorType, pageType, year, month, day, _callback);
        }
    }

    /**
     * Get top 100 editors by edits count.
     * Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100 editors by edits count. You can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content). The user_text returned is either the mediawiki user_text if the user is registered, or null if user is anonymous.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @param project The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off. For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org.  (required)
     * @param editorType If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types.  (required)
     * @param pageType If you want to filter by page-type, use one of content (edits on pages in content namespaces) or non-content (edits on pages in non-content namespaces). If you are interested in edits regardless of their page-type, use all-page-types.  (required)
     * @param year The year of the date for which to retrieve top editors, in YYYY format. (required)
     * @param month The month of the date for which to retrieve top editors, in MM format. If you want to get the top editors of a whole month, the day parameter should be all-days. (required)
     * @param day The day of the date for which to retrieve top editors, in DD format, or all-days for a monthly value. (required)
     * @return GetTopEditorsByEditsCountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of values </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public GetTopEditorsByEditsCountRequestBuilder getTopEditorsByEditsCount(String project, String editorType, String pageType, String year, String month, String day) throws IllegalArgumentException {
        if (project == null) throw new IllegalArgumentException("\"project\" is required but got null");
            

        if (editorType == null) throw new IllegalArgumentException("\"editorType\" is required but got null");
            

        if (pageType == null) throw new IllegalArgumentException("\"pageType\" is required but got null");
            

        if (year == null) throw new IllegalArgumentException("\"year\" is required but got null");
            

        if (month == null) throw new IllegalArgumentException("\"month\" is required but got null");
            

        if (day == null) throw new IllegalArgumentException("\"day\" is required but got null");
            

        return new GetTopEditorsByEditsCountRequestBuilder(project, editorType, pageType, year, month, day);
    }
}
